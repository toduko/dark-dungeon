MOVEMENT_SPEED = 100
MAX_ATTACK_TIMER = 25
MAX_HEALTH = 10
INVINCIBILITY_TIMER = 70
warrior_armor = 2
invincibility = 0
health = 10
attack_timer = 0
walking = false
warrior_dmg = 5

knockback_power = 10
other_knockback_power = 0
took_dmg = false

player_flipped = false


function init(self)
	msg.post(".", "acquire_input_focus")
	self.vel = vmath.vector3()
	msg.post("camera", "follow")

end

local function handle_walking_anim()
	if not walking then
		walking = true
		sprite.play_flipbook("#sprite", "walking")
	end
end

local function attack()
	if attack_timer == 0 then
		sprite.play_flipbook("#sprite", "attacking")
		attack_timer = MAX_ATTACK_TIMER
		walking = false
	end
end

function on_message(self, message_id, message, sender)
	
	if message_id == hash("contact_point_response")
	and message.group == hash("skeleton")
	and sender.fragment == hash("weapon_collision") 
	and attack_timer == MAX_ATTACK_TIMER - 1  then
		print("Attacked skeleton")
		msg.post(message.other_id, "skeleton_hit", {warrior_dmg = warrior_dmg, player_flipped = player_flipped, knockback_power = knockback_power})
	end

	if message_id == hash("warrior_hit") 
	and invincibility <= 0 then
		
		other_knockback_power = message.skeleton_knockback_power * 100
		took_dmg = true
		
		dmg = message.SKELETON_DMG - warrior_armor
		if dmg <= 0 then dmg = 1 end
		health = health - dmg
		invincibility = INVINCIBILITY_TIMER
		print("Warrior should take dmg!")
		
		if health <= 0 then 
			msg.post("camera", "unfollow")
			go.delete()
		end
	end
end

function update(self, dt)
	if attack_timer > 0 then
		attack_timer = attack_timer - 1
		self.vel.x = 0
		self.vel.y = 0
	end

	if invincibility > 0 then
		invincibility = invincibility - 1
	end

	if self.vel.x > 0 and took_dmg then
		self.vel.x = self.vel.x - other_knockback_power
	elseif self.vel.x < 0 and took_dmg then
		self.vel.x = self.vel.x + other_knockback_power
	end
	local pos = go.get_position()
	pos = pos + self.vel * dt
	go.set_position(pos)
	
	if self.vel.x ~= 0 or self.vel.y ~= 0 then
		if attack_timer == 0 then
			handle_walking_anim()
		end
	else
		walking = false
		if attack_timer == 0 then
			sprite.play_flipbook("#sprite", "idle")
		end
	end
	
	self.vel.x = 0
	self.vel.y = 0


end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.vel.y = MOVEMENT_SPEED
	elseif action_id == hash("down") then
		self.vel.y = -MOVEMENT_SPEED
	elseif action_id == hash("left") then
		self.vel.x = -MOVEMENT_SPEED
		sprite.set_hflip("#sprite", true)
		physics.set_hflip("#weapon_collision", true)
		player_flipped = true
	elseif action_id == hash("right") then
		self.vel.x = MOVEMENT_SPEED
		sprite.set_hflip("#sprite", false)
		physics.set_hflip("#weapon_collision", false)
		player_flipped = false
	elseif action_id == hash("attack") or action_id == hash("touch") then
		attack()
	end
end